package ute.shop.test;

import ute.shop.service.impl.*;
import ute.shop.entity.*;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.List;

public class TestAdminDashboard {

    public static void main(String[] args) {
        System.out.println("=== üß≠ KI·ªÇM TRA D·ªÆ LI·ªÜU DASHBOARD ADMIN ===\n");

        try {
            // T·∫°o service
            UserServiceImpl userService = new UserServiceImpl();
            ProductServiceImpl productService = new ProductServiceImpl();
            OrderServiceImpl orderService = new OrderServiceImpl();
            RevenueServiceImpl revenueService = new RevenueServiceImpl();

            // ==== 1Ô∏è‚É£ Th·ªëng k√™ t·ªïng quan ====
            long totalUsers = userService.countAllUsers();
            long totalProducts = productService.countAll();
            long totalOrders = orderService.countAllOrders();
            BigDecimal totalRevenue = revenueService.getTotalRevenueAfterFee(BigDecimal.valueOf(0.10));

            System.out.println("üìä T·ªïng quan h·ªá th·ªëng:");
            System.out.println("  üë§ T·ªïng ng∆∞·ªùi d√πng:     " + totalUsers);
            System.out.println("  üì¶ T·ªïng s·∫£n ph·∫©m:       " + totalProducts);
            System.out.println("  üõí T·ªïng ƒë∆°n h√†ng:       " + totalOrders);
            System.out.println("  üí∞ T·ªïng doanh thu (sau 10% ph√≠): " + formatVND(totalRevenue));
            System.out.println("-----------------------------------------------------\n");

            // ==== 2Ô∏è‚É£ ƒê∆°n h√†ng g·∫ßn ƒë√¢y ====
            System.out.println("üïí ƒê∆°n h√†ng g·∫ßn ƒë√¢y:");
            List<Order> recentOrders = orderService.findRecentOrders(5);
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");

            if (recentOrders.isEmpty()) {
                System.out.println("  ‚ö†Ô∏è Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o g·∫ßn ƒë√¢y.\n");
            } else {
                for (Order o : recentOrders) {
                    System.out.printf("  ‚Ä¢ #%d | %s | %s | %s | %s%n",
                            o.getOrderId(),
                            sdf.format(o.getCreatedAt()),
                            o.getStatus(),
                            o.getPaymentMethod(),
                            formatVND(o.getTotalAmount()));
                }
                System.out.println();
            }

         // ==== 3Ô∏è‚É£ S·∫£n ph·∫©m b√°n ch·∫°y ====
            System.out.println("üî• Top 5 s·∫£n ph·∫©m b√°n ch·∫°y:");
            List<Object[]> bestSellers = productService.findBestSellingProducts(5);
            if (bestSellers.isEmpty()) {
                System.out.println("  ‚ö†Ô∏è Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c b√°n.\n");
            } else {
                int rank = 1;
                for (Object[] row : bestSellers) {
                    // ƒê·ªçc ƒë√∫ng th·ª© t·ª± c·ªôt trong JPQL
                    Integer productId   = (Integer) row[0];
                    String productName  = (String)  row[1];
                    Long totalSold      = ((Number) row[2]).longValue();
                    Integer shopId      = (Integer) row[3];
                    String shopName     = (String)  row[4];
                    BigDecimal minPrice = (BigDecimal) row[5];
                    BigDecimal maxPrice = (BigDecimal) row[6];

                    System.out.printf(
                        "  #%dÔ∏è‚É£ %s | %d l∆∞·ª£t b√°n | Shop: %s | Gi√°: %,.0f‚Ç´ ‚Üí %,.0f‚Ç´%n",
                        rank++, productName, totalSold, shopName, minPrice, maxPrice
                    );
                }
                System.out.println();
            }


        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi ki·ªÉm tra d·ªØ li·ªáu dashboard:");
            e.printStackTrace();
        }
    }

    // H√†m format ti·ªÅn t·ªá
    private static String formatVND(BigDecimal amount) {
        if (amount == null) return "0 ‚Ç´";
        return String.format("%,.0f ‚Ç´", amount);
    }
}
