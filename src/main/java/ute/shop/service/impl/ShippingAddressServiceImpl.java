package ute.shop.service.impl;

import java.util.List;

import ute.shop.dao.IShippingAddressDao;
import ute.shop.dao.impl.ShippingAddressDaoImpl;
import ute.shop.entity.ShippingAddress;
import ute.shop.service.IShippingAddressService;

public class ShippingAddressServiceImpl implements IShippingAddressService {
	private final IShippingAddressDao dao = new ShippingAddressDaoImpl();
	@Override
	public List<ShippingAddress> getAddressesByUser(int userId) {
		return dao.findByUserId(userId);
	}

	@Override
	public ShippingAddress getById(int id) {
		return dao.findById(id);
	}

	@Override
	public void addAddress(ShippingAddress address) {
		List<ShippingAddress> list = dao.findByUserId(address.getUser().getUserId());
		// N·∫øu ch∆∞a c√≥ ƒë·ªãa ch·ªâ n√†o, m·∫∑c ƒë·ªãnh lu√¥n
        if (list.isEmpty()) {
        	address.setIsDefault(true);
        }

        // N·∫øu ƒë∆∞·ª£c ch·ªçn l√†m m·∫∑c ƒë·ªãnh -> b·ªè m·∫∑c ƒë·ªãnh c√°c ƒë·ªãa ch·ªâ kh√°c
        if (address.getIsDefault()) {
            dao.unsetOtherDefaults(address.getUser().getUserId());
        }

		dao.insert(address);
	}

	@Override
	public void updateAddress(ShippingAddress address) {
		// üü° N·∫øu tick l√†m m·∫∑c ƒë·ªãnh -> b·ªè tick c√°c ƒë·ªãa ch·ªâ kh√°c
        if (address.getIsDefault()) {
            dao.unsetOtherDefaults(address.getUser().getUserId(), address.getAddressId());
        }
		dao.update(address);
	}

	@Override
	public void deleteAddress(int id) {
		ShippingAddress deleted = dao.findById(id);
	    if (deleted == null) return;

	    int userId = deleted.getUser().getUserId();
	    boolean wasDefault = deleted.getIsDefault();

	    // X√≥a ƒë·ªãa ch·ªâ
	    dao.delete(id);

	    // N·∫øu x√≥a ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh ‚Üí ƒë·∫∑t ƒë·ªãa ch·ªâ m·ªõi nh·∫•t c√≤n l·∫°i l√†m m·∫∑c ƒë·ªãnh
	    if (wasDefault) {
	        List<ShippingAddress> remaining = dao.findByUserId(userId);
	        if (!remaining.isEmpty()) {
	            ShippingAddress latest = remaining.get(0); // v√¨ findByUserId ORDER BY createdAt DESC
	            latest.setIsDefault(true);
	            dao.update(latest);
	        }
	    }
	}

}
